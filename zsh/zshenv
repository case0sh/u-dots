# Ensure that a non-login, non-interactive shell has a defined environment.
if [[ ($SHLVL -eq 1 && ! -o LOGIN) && -s "${ZDOTDIR:-$HOME}/.zprofile" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprofile"
fi

PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"

# set the github API token for homebrew
HOMEBREW_GITHUB_API_TOKEN_PATH="$HOME/Dropbox/sync.dotfiles/brew.github.token.txt"
[[ -f $HOMEBREW_GITHUB_API_TOKEN_PATH ]] && export HOMEBREW_GITHUB_API_TOKEN=$(<$HOMEBREW_GITHUB_API_TOKEN_PATH)
export HOMEBREW_CASK_OPTS=--no-quarantine
export HOMEBREW_NO_ENV_HINTS=1

# nnn
X_NNN="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/"
if [ -f "$X_NNN/nnn.zsh" ]; then
  . "$X_NNN/nnn.zsh"
fi
unset X_NNN

# Java
#export _JAVA_OPTIONS="-Djava.net.preferIPv4Stack=true"
export JAVA_11_HOME=$(/usr/libexec/java_home -v11)
#export JAVA_17_HOME=$(/usr/libexec/java_home -v17)
export JAVA_HOME="$JAVA_11_HOME"
[[ -d $JAVA_HOME ]] && PATH="$JAVA_HOME/bin:$PATH"

# maven
M2="/usr/local/opt/maven"
if [ -d "$M2" ]; then
  export M2_HOME="$M2/libexec"
  PATH="$M2/bin:$PATH"
fi

# bin in home dir
HOME_BIN="$HOME/bin"
[[ -d $HOME_BIN ]] && PATH="$HOME_BIN:$PATH"

# .local/bin in home dir
HOME_LBIN="$HOME/.local/bin"
[[ -d $HOME_LBIN ]] && PATH="$HOME_LBIN:$PATH"

# hombrew sbin
BREW_SBIN=/usr/local/sbin
[[ -d $BREW_SBIN ]] && PATH="$BREW_SBIN:$PATH"

## gnu coreutils
GNU_BIN=$(brew --prefix coreutils)/bin
[[ -d "$GNU_BIN" ]] && PATH="$PATH:$GNU_BIN"

# gnu findutils
BIN_FIND_GNU="/usr/local/opt/findutils/bin"
[[ -d $BIN_FIND_GNU ]] && PATH="$BIN_FIND_GNU:$PATH"

# gnu man
MANPATH_GNU="/usr/local/opt/findutils/libexec/gnuman"
[[ -d $MANPATH_GNU ]] && export MANPATH="$MANPATH_GNU:$MANPATH"

# android
ANDROID_HOME="$HOME/Library/Android/sdk"
if [[ -d $ANDROID_HOME ]]; then
  export ANDROID_HOME
  PATH="$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools/bin:$PATH"
fi

# anaconda3
# ANACONDA3="/usr/local/anaconda3/bin"
# [[ -d $ANACONDA3 ]] && PATH="$ANACONDA3:$PATH"

# go
# GOROOT="$(brew --prefix golang)/libexec"
GOROOT="/usr/local/opt/go/libexec"
if [ -d "$GOROOT" ]; then
  export GOROOT
  export GOPATH="$HOME/.go"
  [[ -d $GOPATH ]] || mkdir -p "$GOPATH"
  [[ -d "$GOPATH/src/github.com" ]] || mkdir -p "$GOPATH/src/github.com"
  PATH="$PATH:$GOPATH/bin:$GOROOT/bin"
fi

# ruby
# RUBY_PATH="/usr/local/opt/ruby"
# if [ -d "$RUBY_PATH" ]; then
#   export LDFLAGS="$LDFLAGS -L$RUBY_PATH/lib"
#   export CPPFLAGS="$CPPFLAGS -I$RUBY_PATH/include"
#   export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$RUBY_PATH/lib/pkgconfig"
#   PATH="$RUBY_PATH/bin:${PATH}"
# fi

# disable to run Firefox in safe mode
export MOZ_DISABLE_SAFE_MODE_KEY="never"

# curl
CURLP="/usr/local/opt/curl-openssl/bin"
[[ -d $CURLP ]] && PATH="$CURLP:$PATH"

# misc
# PATH="$PATH:$HOME/hacker1/xsser"

# gettext
GETTXT="/usr/local/opt/gettext"
if [ -d "$GETTXT" ]; then
  export LDFLAGS="$LDFLAGS -L$GETTXT/lib"
  export CPPFLAGS="$CPPFLAGS -I$GETTXT/include"
  PATH="$GETTXT/bin:${PATH}"
fi

# confluent kafka tools
#CFT="$HOME/.local/confluent-cli"
#if [ -d "$CFT" ] ; then
#  PATH="$PATH:$CFT"
#  export CONFLUENT_CURRENT="$CFT/var"
#fi

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh" # This loads nvm

# python
export PYENV_ROOT="$HOME/.pyenv"
PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# mysql-client
#MSQL_CLNT="/usr/local/opt/mysql-client/bin"
#[[ -d $MSQL_CLNT ]] && PATH="$MSQL_CLNT:$PATH"

# remote docker
# DOCKER_BIN="$HOME/.local/bin/docker"
# DOCKER_REMOTE_PORT=2376
# DOCKER_REMOTE_HOST="192.168.1.150"
# if [ -f $DOCKER_BIN ] ; then
#   export DOCKER_HOST="tcp://$DOCKER_REMOTE_HOST:$DOCKER_REMOTE_PORT"
#   export DOCKER_TLS_VERIFY=1
#   export DOCKER_CERT_PATH=~/.docker
# fi

# WORDS="$HOME/h1/words"
# [[ -d $WORDS ]] && PATH="$WORDS:$PATH"

# https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally
# NPM_GLOB="$HOME/.npm-global"
# mkdir -p $NPM_GLOB
# npm config set prefix $NPM_GLOB
# export PATH=$NPM_GLOB:$PATH

NVM_DIR="$HOME/.nvm"
[[ -d $NVM_DIR ]] && export NVM_DIR
[[ -s "/usr/local/opt/nvm/nvm.sh" ]] && . "/usr/local/opt/nvm/nvm.sh" # This loads nvm

# P_VER="3.9"
# L_PYTHON="$HOME/Library/Python/$P_VER/bin"
# [[ -d "$L_PYTHON" ]] && PATH="$PATH:$L_PYTHON"
# B_PYTHON="/usr/local/opt/python@$P_VER/libexec/bin"
# [[ -d "$B_PYTHON" ]] && PATH="$B_PYTHON:$PATH"

# APR
# [[ -d "/usr/local/opt/apr/bin" ]] && PATH="/usr/local/opt/apr/bin:$PATH"
# [[ -d "usr/local/opt/apr-util/bin" ]] && PATH="/usr/local/opt/apr-util/bin:$PATH"

# NODE_PATH="/usr/local/opt/node@10"
# [[ -d $NODE_PATH ]] && PATH="$NODE_PATH/bin:$PATH"

# WMVARE_PATH="/Applications/VMware Fusion.app/Contents/Public"
# [[ -d $WMVARE_PATH ]] && PATH="$PATH:$WMVARE_PATH"

#perl
# PATH="/Users/akulynyak/perl5/bin${PATH:+:${PATH}}"; export PATH;
# PERL5LIB="/Users/akulynyak/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
# PERL_LOCAL_LIB_ROOT="/Users/akulynyak/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
# PERL_MB_OPT="--install_base \"/Users/akulynyak/perl5\""; export PERL_MB_OPT;
# PERL_MM_OPT="INSTALL_BASE=/Users/akulynyak/perl5"; export PERL_MM_OPT;



# Ruckus
# export RKSCLOUD="$HOME/work/ruckus/Repo/rks-cloud"

# confluent
CONFLUENT_VER="7.0.1"
CONFLUENT_BIN="$HOME/.config/confluent-$CONFLUENT_VER/bin"
[[ -d $CONFLUENT_BIN ]] && PATH="$CONFLUENT_BIN:$PATH"
unset CONFLUENT_VER
unset CONFLUENT_BIN

# the last one
export PATH=".:$PATH"
ulimit -n 1024